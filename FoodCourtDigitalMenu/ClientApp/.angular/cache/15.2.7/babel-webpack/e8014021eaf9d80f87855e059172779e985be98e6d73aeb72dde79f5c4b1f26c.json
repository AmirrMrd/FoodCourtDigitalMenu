{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\n// import { SettingModel } from 'src/models/setting.model';\n// import { LocalStoreManager } from './local-store-manager.service';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json; charset=utf-8'\n  })\n};\nlet headers = new HttpHeaders({\n  \"Content-Type\": \"application/octet-stream\"\n});\nexport class RestApiService {\n  // setting: SettingModel;\n  // protected storage: LocalStoreManager;\n  // accessToken:string='';\n  constructor(http) {\n    this.http = http;\n    //    this.apiUrl = \"http://192.168.247.50:14000\";\n    this.apiUrl = environment.baseUrl || this.baseUrl();\n  }\n  baseUrl() {\n    let base = '';\n    if (window.location.origin) {\n      base = window.location.origin;\n    } else {\n      base = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n    }\n    return base.replace(/\\/$/, '');\n  }\n  getToken(data) {\n    const fullUrl = `${this.apiUrl}Token`;\n    const a = JSON.stringify(data);\n    return this.http.post(fullUrl, JSON.stringify(data), httpOptions);\n  }\n  get() {\n    const fullUrl = `${this.apiUrl}`;\n    return this.http.get(fullUrl, httpOptions);\n  }\n  testConnection(testUrl, CntUrl) {\n    const fullUrl = `${testUrl}${CntUrl}`;\n    return this.http.get(fullUrl, httpOptions);\n  }\n  getEntity(CntUrl) {\n    const fullUrl = `${this.apiUrl}/${CntUrl}`;\n    return this.http.get(fullUrl, httpOptions);\n  }\n  getWaiterList(CntUrl) {\n    const fullUrl = `${this.apiUrl}${CntUrl}`;\n    return this.http.get(fullUrl, httpOptions);\n  }\n  getFilterEntity(CntUrl, filter) {\n    const fullUrl = `${this.apiUrl}/${CntUrl}?Filter=${filter}`;\n    return this.http.get(fullUrl, httpOptions);\n  }\n  getEntityById(CntUrl, id) {\n    const url = `${this.apiUrl}${CntUrl}/${id}`;\n    return this.http.get(url, httpOptions);\n  }\n  postEntity(data, CntUrl) {\n    const fullUrl = `${this.apiUrl}/${CntUrl}`;\n    const jason = JSON.stringify(data);\n    return this.http.post(fullUrl, jason, httpOptions);\n  }\n  updateEntity(id, data, CntUrl) {\n    const url = `${this.apiUrl}${CntUrl}/${id}`;\n    return this.http.put(url, data, httpOptions);\n  }\n  deleteEntity(id, CntUrl) {\n    const url = `${this.apiUrl}${CntUrl}/${id}`;\n    return this.http.delete(url, httpOptions);\n  }\n  upload(data, CntUrl) {\n    const fullUrl = `${this.apiUrl}/${CntUrl}`;\n    const jason = JSON.stringify(data);\n    return this.http.post(fullUrl, jason, headers);\n  }\n  getImage(apiName) {\n    const headers = new HttpHeaders().set(\"Accept\", \"image/png\");\n    const options = {\n      headers: headers,\n      responseType: \"blob\"\n    };\n    const url = this.apiBaseUrl + apiName;\n    return this.handleRequest(url, this.http.get(url, options));\n  }\n}\nRestApiService.ɵfac = function RestApiService_Factory(t) {\n  return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nRestApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestApiService,\n  factory: RestApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","environment","httpOptions","headers","RestApiService","constructor","http","apiUrl","baseUrl","base","window","location","origin","protocol","hostname","port","replace","getToken","data","fullUrl","a","JSON","stringify","post","get","testConnection","testUrl","CntUrl","getEntity","getWaiterList","getFilterEntity","filter","getEntityById","id","url","postEntity","jason","updateEntity","put","deleteEntity","delete","upload","getImage","apiName","set","options","responseType","apiBaseUrl","handleRequest","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\am.alimoradi\\source\\repos\\FoodCourtDigitalMenu\\FoodCourtDigitalMenu\\ClientApp\\src\\app\\Services\\rest-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\n// import { SettingModel } from 'src/models/setting.model';\r\n// import { LocalStoreManager } from './local-store-manager.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json; charset=utf-8' })\r\n};\r\nlet headers: HttpHeaders = new HttpHeaders({\r\n    \"Content-Type\": \"application/octet-stream\",\r\n  });\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RestApiService<T> {\r\n    apiUrl: string;\r\n    // setting: SettingModel;\r\n    // protected storage: LocalStoreManager;\r\n    // accessToken:string='';\r\n    constructor(private http: HttpClient) {\r\n    //    this.apiUrl = \"http://192.168.247.50:14000\";\r\n        this.apiUrl = environment.baseUrl || this.baseUrl();\r\n    }\r\n    public baseUrl() {\r\n        let base = '';\r\n\r\n        if (window.location.origin) {\r\n            base = window.location.origin;\r\n        } else {\r\n            base = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\r\n        }\r\n\r\n        return base.replace(/\\/$/, '');\r\n    }\r\n    getToken<T>(data: any): Observable<any> {\r\n        const fullUrl = `${this.apiUrl}Token`;\r\n        const a = JSON.stringify(data);\r\n        return this.http.post<T>(fullUrl, JSON.stringify(data), httpOptions);\r\n    }\r\n    get(): Observable<any> {\r\n        const fullUrl = `${this.apiUrl}`;\r\n        return this.http.get(fullUrl, httpOptions);\r\n  }\r\n  \r\n    testConnection<T>(testUrl: string, CntUrl: string): Observable<any> {\r\n        const fullUrl = `${testUrl}${CntUrl}`;\r\n        return this.http.get<T>(fullUrl, httpOptions);\r\n    }\r\n\r\n    getEntity<T>(CntUrl: string): Observable<any> {\r\n        const fullUrl = `${this.apiUrl}/${CntUrl}`;\r\n        return this.http.get<T>(fullUrl, httpOptions);\r\n    }\r\n\r\n    getWaiterList<T>(CntUrl: string): Observable<any> {\r\n        const fullUrl = `${this.apiUrl}${CntUrl}`;\r\n        return this.http.get<T>(fullUrl, httpOptions);\r\n    }\r\n\r\n    getFilterEntity<T>(CntUrl: string, filter: any): Observable<any> {\r\n        const fullUrl = `${this.apiUrl}/${CntUrl}?Filter=${filter}`;\r\n        return this.http.get<T>(fullUrl, httpOptions);\r\n    }\r\n\r\n    getEntityById<T>(CntUrl: string, id: number): Observable<any> {\r\n        const url = `${this.apiUrl}${CntUrl}/${id}`;\r\n        return this.http.get<T>(url, httpOptions);\r\n    }\r\n\r\n    postEntity<T>(data:any, CntUrl: string): Observable<any> {\r\n        const fullUrl = `${this.apiUrl}/${CntUrl}`;\r\n        const jason = JSON.stringify(data);\r\n        return this.http.post<T>(fullUrl, jason, httpOptions);\r\n    }\r\n\r\n    updateEntity<T>(id: string, data:any, CntUrl: string): Observable<any> {\r\n        const url = `${this.apiUrl}${CntUrl}/${id}`;\r\n        return this.http.put<T>(url, data, httpOptions);\r\n    }\r\n\r\n    deleteEntity<T>(id: string, CntUrl: string): Observable<T> {\r\n        const url = `${this.apiUrl}${CntUrl}/${id}`;\r\n        return this.http.delete<T>(url, httpOptions);\r\n    }\r\n    upload<T>(data:any, CntUrl: string): Observable<any> {\r\n        const fullUrl = `${this.apiUrl}/${CntUrl}`;\r\n        const jason = JSON.stringify(data);\r\n        return this.http.post<T>(fullUrl, jason, headers);\r\n    }\r\n      \r\n      getImage<T>(apiName: string): Observable<T> {\r\n        const headers = new HttpHeaders().set(\"Accept\", \"image/png\");\r\n        const options = { headers: headers, responseType: \"blob\" as \"json\" };\r\n        const url = this.apiBaseUrl + apiName;\r\n        return this.handleRequest(url, this.http.get<T>(url, options));\r\n      }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}